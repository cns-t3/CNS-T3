name: FYP CI Pipeline
on:
  push:
    branches: ["dev", "prod", "feature/*"]
    
jobs:

  # npm-vulnerabilities-check:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v1
  #   - name: Set up Vulnerability check
  #     uses: actions/setup-node@v2
  #     with:
  #       node-version: 18.x
  #   - name: Scan for backend npm package vulnerabilities
  #     run: |
  #       cd backend 
  #       npm install
  #       bash script/pipeline/scan_for_vulnerabilities.sh
  #   - name: Scan for frontend npm package vulnerabilities
  #     run: |
  #       cd client 
  #       npm install
  #       bash script/pipeline/scan_for_vulnerabilities.sh

  # unit-testing:
  #   runs-on: ubuntu-latest
  #   container: node:16
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Install Backend Packages
  #       working-directory: ./backend
  #       run: npm install
  #     - name: Run Tests
  #       working-directory: ./backend/tests
  #       run: npm run test
  #     - name: Store unit testing coverage report
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: unit-testing-results
  #         path: ./backend/coverage/lcov.info

  sonarqube-scans:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # not sure if need anot have to see until CI is set up
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # es-lint-scans:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #     - name: Run Super-Linter
  #       uses: github/super-linter@v4

  # performance-test:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2
  #   - name: Start Express server
  #     working-directory: ./backend
  #     run: |
  #       npm install
  #       node router.js &
  #       sleep 10 # Sleep for some time to allow the server to start
  #       while ! nc -z localhost 5000; do sleep 1; done
  #       echo "Server is ready to be tested."   
  #   - name: Run local k6 test
  #     uses: grafana/k6-action@v0.2.0
  #     with:
  #       filename: backend/performance_test.js
  #   - name: Store performance test results
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: k6-summary-report
  #       path: summary.json
  #   - name: Stop Express server
  #     run: |
  #       pkill -f "node router.js"    

  # SAST-scan:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Node.js SAST Scan
  #       uses: AppThreat/sast-scan-action@master
  #       with:
  #         output: reports
  #         type: nodejs
  #     - name: Store SAST scan results 
  #       uses: actions/upload-artifact@v1
  #       with:
  #         name: SAST-report
  #         path: reports

